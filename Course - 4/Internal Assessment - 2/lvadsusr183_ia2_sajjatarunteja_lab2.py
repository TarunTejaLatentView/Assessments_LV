# -*- coding: utf-8 -*-
"""LVADSUSR183_IA2_SajjaTarunTeja_Lab2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_tFiAiUSpgsbsZplPybryCHEB5vN8FrG
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelEncoder
from sklearn.metrics import silhouette_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error, precision_score, f1_score, recall_score, confusion_matrix
from sklearn.cluster import KMeans

df = pd.read_csv("/content/Mall_Customers.csv")

df.head()

df.info()

df.isna().sum()
# No Nan Values in the dataset

aim = df["Annual Income (k$)"].mean()
aim

df["Annual Income (k$)"]=df["Annual Income (k$)"].fillna(aim)

df.isna().sum()

df.duplicated().sum()
# No Duplicated Values

df['Age_Income_Ratio'] = df['Age'] / df['Annual Income (k$)']
scaler = StandardScaler()
scaled_data = scaler.fit_transform(df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)', 'Age_Income_Ratio']])

df=df.drop(["Gender","CustomerID"],axis=1)

df.head()

k_val = range(2, 10)
inertia_value = []
silhouette_scores = []

for k in k_val:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_data)
    inertia_value.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(scaled_data, kmeans.labels_))

print("Silhouette scores\n")
plt.plot(k_val, silhouette_scores, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Scores for Optimal k')
plt.xticks(k_val)
plt.show()

# The Silhoute Score is maximum for the value of 7

print("Elbow curve\n")
plt.plot(k_val, inertia_value, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
plt.title('Elbow Curve for Optimal k')
plt.xticks(k_val)
plt.show()

# Fixiing the k value to be 7 after analysis the Silhoute Score
# and the interia fromt eh elbow graph
optimal_k = 7
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
kmeans.fit(scaled_data)

cluster_labels = kmeans.predict(scaled_data)

silhouette_avg = silhouette_score(scaled_data, cluster_labels)
print("silhouette score: ",silhouette_avg)

df['Cluster'] = kmeans.labels_
cluster_prof = df.groupby('Cluster').mean()
print(cluster_prof)

# Target marketing can be achieved by targetting high value products to people between the age group of 32 as they have the most spending score.

# And the products with almost satified price range can be promoted to their correponding age group cluster.
# Hence enhance the probability of a customer to spend on that product. Promoting products within a suitable price range to the corresponding age group cluster can enhance the likelihood of customer engagement and purchases. By aligning product offerings with the financial capabilities and preferences of different age segments, businesses can optimize their marketing strategies and maximize returns on investment.

# In essence, targeted marketing leverages consumer insights to tailor promotional campaigns and product offerings to specific demographic segments, ultimately driving customer engagement and increasing sales.

