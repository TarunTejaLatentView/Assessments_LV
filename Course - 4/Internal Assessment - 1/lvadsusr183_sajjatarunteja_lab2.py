# -*- coding: utf-8 -*-
"""LVADSUSR183_SajjaTarunTeja_Lab2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rs62t-3UfqkcdbW0MaB-nuBGqMqhwmYO
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression, LinearRegression
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.metrics import accuracy_score, r2_score, recall_score, confusion_matrix,f1_score, classification_report,precision_score

df = pd.read_csv("/content/booking.csv")
df.head()

df.info()

df.isna().sum()

# Dropping Nan values from the DataFrame
df =df.dropna()

df.duplicated().sum()

# Dropping the duplicate values from the DataFrame
df=df.drop_duplicates()

#Checking for outliers in age
ncol = df.select_dtypes(include = ['float','int'])
sns.boxplot(ncol)
# Outliers in BMI and Charges

numerical_features = ['number of week nights', 'number of adults','number of children','number of weekend nights','number of week nights','lead time','average price']
for feature in numerical_features:
    lower_bound = df[feature].quantile(0.05)
    upper_bound = df[feature].quantile(0.95)
    df[feature] = df[feature].clip(lower=lower_bound, upper=upper_bound)

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()

df["type of meal"] = label_encoder.fit_transform(df["type of meal"])
df["car parking space"] = label_encoder.fit_transform(df["car parking space"])
df["room type"] = label_encoder.fit_transform(df["room type"])
df["repeated"] = label_encoder.fit_transform(df["repeated"])
df["P-C"] = label_encoder.fit_transform(df["P-C"])
df["P-not-C"] = label_encoder.fit_transform(df["P-not-C"])
df["booking status"] = label_encoder.fit_transform(df["booking status"])
df["market segment type"] = label_encoder.fit_transform(df["market segment type"])

df = df.drop(['Booking_ID', 'date of reservation'], axis=1)
correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

x = df.drop('booking status', axis=1)
y = df['booking status']

xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.2,random_state=24)

model = LogisticRegression()
model.fit(xtrain,ytrain)

ypred = model.predict(xtest)

accuracy = accuracy_score(ytest, ypred)
print("\nAccuracy:", accuracy)
precision = precision_score(ytest, ypred)
recall = recall_score(ytest, ypred)
f1 = f1_score(ytest, ypred)
conf_matrix = confusion_matrix(ytest, ypred)
print("\nPrecision:", precision)
print("\nRecall:", recall)
print("\nF1-score:", f1)
print("\nConfusion Matrix:")
print(conf_matrix)

print("\nClassification Report:")
print(classification_report(ytest, ypred))

